import os
import re
import io
import logging
import asyncio
from time import gmtime, strftime, localtime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TOKEN, BOSS_ID, LOZHKIN_ID, PELICAN_TEAM_ID, \
    MAIN_KEYBOARD, BIG_ROOM_DOMUCH_KEYBOARD, DEAL_CONFIRM_KEYBOARD,\
    CANCEL_KEYBOARD, BUILDING_KEYBOARD, DOCUMENTS_KEYBOARD, BIG_ROOM_STUD_CLUB_KEYBOARD,\
    SERVICE_DOC_PASSWORD, MAT_HELP_FOND_KEYBOARD, MAT_HELP_PROF_KEYBOARD, MAT_HELP_BUDGET_KEYBOARD,\
    MAT_HELP_CATEGORY_PROF_DICT, MAT_HELP_CATEGORY_FOND_DICT, MAT_HELP_CATEGORY_PROF_LIST, MAT_HELP_CATEGORY_FOND_LIST,\
    INSTITUTE_KEYBOARD

from load import load_xl_data
from do import do_find_top_answers, do_remember_user_start
from df_config import detect_intent_texts
from states import ServiceForm, MatHelpForm
from word_model import render_new_doc_sluzhebka
#from mail_model import send_email


root_logger= logging.getLogger()
root_logger.setLevel(logging.INFO) # or whatever
handler = logging.FileHandler('app.log', 'w', 'utf-8') # or whatever
formatter = logging.Formatter('%(levelname)s - %(message)s') # or whatever
handler.setFormatter(formatter) # Pass handler as a parameter, not assign
root_logger.addHandler(handler)

loop = asyncio.get_event_loop()

bot = Bot(token=TOKEN)

storage = MemoryStorage()

dp = Dispatcher(bot, storage=storage, loop=loop)

xl_data = load_xl_data("qa.xlsx")


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await do_remember_user_start(message)
    hello_message = """
–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫!

–Ø ‚Äî –¶–∏—Ñ—Ä–æ–≤–æ–π –ø–µ–ª–∏–∫–∞–Ω, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –∂–∏–∑–Ω—å –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –Ø –±—É–¥—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–π –æ–±–æ –≤—Å–µ–º, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –ü–æ–ª–∏—Ç–µ—Ö–µ, —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏ –∑–¥–µ—Å—å –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. –ü–∏—à–∏ –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ç–µ–±–µ –æ—Ç–≤–µ—á—É!

–ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –∏ –º–æ–≥—É –Ω–µ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–æ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å. –°—Ç–∞—Ä–∞–π—Å—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ.

–ü—Ä–æ—Ñ–∫–æ–º, —Å–¥–µ–ª–∞–Ω–æ —Å üíö!"""

    await message.answer(hello_message, reply_markup=MAIN_KEYBOARD)


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    help_message = """
–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–π –æ–±–æ –≤—Å–µ–º, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –ü–æ–ª–∏—Ç–µ—Ö–µ, —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏ –∑–¥–µ—Å—å –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. –ü–∏—à–∏ –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ç–µ–±–µ –æ—Ç–≤–µ—á—É!

–ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –∏ –º–æ–≥—É –Ω–µ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–æ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å. –°—Ç–∞—Ä–∞–π—Å—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ."""

    await message.answer(help_message, reply_markup=MAIN_KEYBOARD)


@dp.message_handler(lambda message: message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚úèÔ∏è')
async def documents_main_handler(message: types.Message):
    text = """
–≠—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å.
–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –í–∞–º –ø–∏—à–µ—Ç –±–æ—Ç, –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã.

–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –±–æ—Ç –∑–∞–¥–∞—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ (—Ç–∞–º, –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å).

–ù–∞ –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ, –í—ã —É–≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–¢–ú–ï–ù–ò–¢–¨ –î–ï–ô–°–¢–í–ò–ï" ‚Äî —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
–î–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –í–∞–º–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞!

–ü—Ä–æ—Ñ–∫–æ–º, —Å–¥–µ–ª–∞–Ω–æ —Å üíö!"""
    await message.answer(text)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=DOCUMENTS_KEYBOARD)



# ================================================================================================== –°–õ–£–ñ–ï–ë–ö–ê

@dp.message_handler(state=ServiceForm.password_for_service)
async def service_audience_message_handler(message: types.Message, state: FSMContext):
    #print("in audience")
    await state.update_data(password_for_service=message.text)

    if message.text == SERVICE_DOC_PASSWORD:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ–±—Ä–∞–∑—Ü–æ–º –Ω–∏–∂–µ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:")

        with open("word_templates/sluzhebka/example_service.docx", 'rb') as file:
            await bot.send_document(message.chat.id, file, disable_notification=True)

        await ServiceForm.building.set()
        await message.answer("–í –∫–∞–∫–æ–º –∑–¥–∞–Ω–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è/–ø–æ–º–µ—â–µ–Ω–∏–µ?\n\
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=BUILDING_KEYBOARD)
    
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=CANCEL_KEYBOARD)
        await ServiceForm.password_for_service.set()


@dp.callback_query_handler(lambda callback_query: True, state=ServiceForm.building)
async def service_building_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    #print("in building")
    if callback_query.data == "cancel_building":
        await state.reset_state()
        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=MAIN_KEYBOARD)

    elif callback_query.data in ('gz', 'nik', '3k'):
        await state.update_data(building=callback_query.data)
        await ServiceForm.audience.set()
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–¥–∞–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—É–¥–∏—Ç–æ—Ä–∏–π/–ø–æ–º–µ—â–µ–Ω–∏–π.\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ (—Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏/–ø–æ–º–µ—â–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: '257'.", reply_markup=CANCEL_KEYBOARD)

    elif callback_query.data == 'du':
        await state.update_data(building=callback_query.data)
        await ServiceForm.room.set()
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–æ–º —É—á—ë–Ω—ã—Ö, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏—è\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=BIG_ROOM_DOMUCH_KEYBOARD)

    elif callback_query.data == 'sc':
        await state.update_data(building=callback_query.data)
        await ServiceForm.room.set()
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –∫–ª—É–±, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏—è\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=BIG_ROOM_STUD_CLUB_KEYBOARD)


@dp.callback_query_handler(lambda callback_query: True, state=ServiceForm.room)
async def service_room_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    #print("in room")
    if callback_query.data == "cancel_big_room":
        await state.reset_state()
        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=MAIN_KEYBOARD)

    elif callback_query.data in ('actzal', 'holl', 'actzal_holl', 'prime_time', 'actzal_prime_time'):
        await state.update_data(room=callback_query.data)
        await ServiceForm.date_interval.set()
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ (—Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) –¥–∞—Ç—É(—ã) –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\
–ù–∞–ø—Ä–∏–º–µ—Ä: '—Å 18 —Å–µ–Ω—Ç—è–±—Ä—è –ø–æ 14 –Ω–æ—è–±—Ä—è 2020 –≥–æ–¥–∞' –∏–ª–∏ 'c 20 –º–∞—Ä—Ç–∞ –ø–æ 25 –º–∞—è 2020 –≥–æ–¥–∞ (–ø–æ —á–µ—Ç–≤–µ—Ä–≥–∞–º)' –∏–ª–∏,\
–µ—Å–ª–∏ –æ–¥–∏–Ω –¥–µ–Ω—å, ‚Äî '18 —Å–µ–Ω—Ç—è–±—Ä—è'.", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=ServiceForm.audience)
async def service_audience_message_handler(message: types.Message, state: FSMContext):
    #print("in audience")
    await state.update_data(audience=message.text)
    await ServiceForm.date_interval.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ (—Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) –¥–∞—Ç—É(—ã) –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ '0' –≤ –¥–∞—Ç–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–¥–Ω–∞ –∑–Ω–∞—á–∞—â–∞—è —Ü–∏—Ñ—Ä–∞).\n\
–ù–∞–ø—Ä–∏–º–µ—Ä: '—Å 02 —Å–µ–Ω—Ç—è–±—Ä—è –ø–æ 14 –Ω–æ—è–±—Ä—è 2020 –≥–æ–¥–∞' –∏–ª–∏ 'c 20 –º–∞—Ä—Ç–∞ –ø–æ 08 –º–∞—è 2020 –≥–æ–¥–∞ (–ø–æ —á–µ—Ç–≤–µ—Ä–≥–∞–º)' –∏–ª–∏,\
–µ—Å–ª–∏ –æ–¥–∏–Ω –¥–µ–Ω—å, ‚Äî '05 —Å–µ–Ω—Ç—è–±—Ä—è'.", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=ServiceForm.date_interval)
async def service_date_interval_message_handler(message: types.Message, state: FSMContext):
    #print("in date_interval")
    await state.update_data(date_interval=message.text)
    await ServiceForm.time_interval.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\
–ù–∞–ø—Ä–∏–º–µ—Ä: '—Å 18:00 –¥–æ 21:00'.", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=ServiceForm.time_interval)
async def service_time_interval_message_handler(message: types.Message, state: FSMContext):
    #print("in time_interval")
    await state.update_data(time_interval=message.text)
    await ServiceForm.goal.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–æ '–î–õ–Ø' –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ!\n\
–ù–∞–ø—Ä–∏–º–µ—Ä: '–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏–π –ø—Ä–æ—Ñ–æ—Ä–≥–æ–≤ –ò–ö–ù–¢' –∏–ª–∏ \
'–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ—Ç—á–µ—Ç–Ω–æ-–≤—ã–±–æ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø—Ä–æ—Ñ–±—é—Ä–æ –ò–°–ò'.", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=ServiceForm.goal)
async def service_goal_message_handler(message: types.Message, state: FSMContext):
    #print("in goal")
    await state.update_data(goal=message.text)
    await ServiceForm.responsible.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ê–ú–ò–õ–ò–Æ, –ò–ú–Ø –∏ –¢–ï–õ–ï–§–û–ù –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\
–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, —Ç–µ–ª.: 89111111111'.", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=ServiceForm.responsible)
async def service_responsible_message_handler(message: types.Message, state: FSMContext):
    #print("in responsible")
    await state.update_data(responsible=message.text)
    state_data = await state.get_data()
    new_file = await render_new_doc_sluzhebka(state_data)
    if new_file != None:
        with open(new_file, 'rb') as file:
            await bot.send_document(message.chat.id, file, disable_notification=True)
    else:
        await message.answer("–ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
    await state.update_data(filename=new_file)
    await ServiceForm.confirm.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏\
–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ) –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É–∂–µ–±–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏.", reply_markup=DEAL_CONFIRM_KEYBOARD)


@dp.callback_query_handler(lambda callback_query: True, state=ServiceForm.confirm)
async def service_confirm_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    #print("in confirm")
    state_data = await state.get_data()
    filename = state_data.get('filename')

    if callback_query.data == "cancel_deal_send":
        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É–∂–µ–±–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏,\
–≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –í–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞.", reply_markup=MAIN_KEYBOARD)

    elif callback_query.data == "confirm_deal_send":
        await callback_query.message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É–∂–µ–±–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏ –≤ —á–∞—Ç –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.", disable_notification=True)
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è...", disable_notification=True)
        
        goal = state_data.get('goal')
        responsible = state_data.get('responsible')
        
        mail_message = f"====================\n–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:\n\n–¶–µ–ª—å: {goal}\n\
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible}\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}\n–î–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–¶–∏—Ñ—Ä–æ–≤–æ–π –ü–µ–ª–∏–∫–∞–Ω)\n===================="
        
        await bot.send_message(PELICAN_TEAM_ID, mail_message)

        with open(filename, 'rb') as file:
            await bot.send_document(PELICAN_TEAM_ID, file, disable_notification=True)

        #is_sent = send_email("zhozhpost@gmail.com", "–ù–û–í–ê–Ø –°–õ–£–ñ–ï–ë–ù–ê–Ø –ó–ê–ü–ò–°–ö–ê –ò–ó –ë–û–¢–ê", mail_message, filename)
        #if is_sent:
        await callback_query.message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏,\n\
—Å–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º :)")
        
        q_time = strftime("%Y-%m-%d %H:%M:%S", localtime())
        logging.info(f"{q_time}--New document send to pelican chat | {responsible} | {goal}")
        # else:
        #     await callback_query.message.answer("–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –Ω–∞ –ø–æ—á—Ç—É –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        #     q_time = strftime("%Y-%m-%d %H:%M:%S", localtime())
        #     logging.error(f"{q_time}--Error while sending a document | {responsible} | {goal}")
        
    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), filename)
    os.remove(path)
    await state.reset_state()


# ================================================================================================== –ú–ê–¢ –ü–û–ú–û–©–¨

@dp.callback_query_handler(state=MatHelpForm.prof_or_fond)
async def mat_help_prof_or_fond_budget_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "cancel_mat_help_budget":
        if await state.get_state() != None:
            await state.reset_state()
            await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=MAIN_KEYBOARD)

    elif callback_query.data == "mat_help_prof":
        await state.update_data(prof_or_fond="prof")
        await MatHelpForm.name.set()

        with open("word_templates/mat_help/mat_help_prof_example.docx", 'rb') as file:
            await bot.send_document(callback_query.message.chat.id, file, disable_notification=True)

        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–ê–¢–ï–†–ò–ê–õ–¨–ù–£–Æ –ü–û–ú–û–©–¨ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤\n\
–±—é–¥–∂–µ—Ç–∞ –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤ –°–ü–±–ü–£ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ–±—Ä–∞–∑—Ü–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ê–ú–ò–õ–ò–Æ, –ò–ú–Ø –∏ –û–¢–ß–ï–°–¢–í–û. –ù–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á':", reply_markup=CANCEL_KEYBOARD)

    elif callback_query.data == "mat_help_fond":
        await state.update_data(prof_or_fond="fond")
        await MatHelpForm.name.set()

        with open("word_templates/mat_help/mat_help_fond_example.docx", 'rb') as file:
            await bot.send_document(callback_query.message.chat.id, file, disable_notification=True)

        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–ê–¢–ï–†–ò–ê–õ–¨–ù–£–Æ –ü–û–ú–û–©–¨ –∏–∑ –§–æ–Ω–¥–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –æ–±—É—á–∞—é—â–∏—Ö—Å—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\
–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ–±—Ä–∞–∑—Ü–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ê–ú–ò–õ–ò–Æ, –ò–ú–Ø –∏ –û–¢–ß–ï–°–¢–í–û. –ù–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á':", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=MatHelpForm.name)
async def mat_help_name_message_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await MatHelpForm.category.set()
    budget = await state.get_data()
    
    if budget['prof_or_fond'] == "prof":
        await message.answer(MAT_HELP_CATEGORY_PROF_LIST)
    elif budget['prof_or_fond'] == "fond":
        await message.answer(MAT_HELP_CATEGORY_FOND_LIST)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.\n\
–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=CANCEL_KEYBOARD)


@dp.message_handler(state=MatHelpForm.category)
async def mat_help_category_message_handler(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        budget = await state.get_data()
        try:
            if budget['prof_or_fond'] == "prof":
                await state.update_data(category=MAT_HELP_CATEGORY_PROF_DICT[int(message.text)])
            elif budget['prof_or_fond'] == "fond":
                await state.update_data(category=MAT_HELP_CATEGORY_FOND_DICT[int(message.text)])

            await MatHelpForm.institute.set()
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n\
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=INSTITUTE_KEYBOARD)
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=CANCEL_KEYBOARD)
            await MatHelpForm.category.set()

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=CANCEL_KEYBOARD)
        await MatHelpForm.category.set()

    


# ================================================================================================== MAIN CALLBACK
@dp.callback_query_handler(lambda callback_query: callback_query.data in ("main_cancel", "service_document", "mat_help"), state="*")
async def all_cancels_handler(callback_query: types.CallbackQuery, state: FSMContext):
    #print("in all_cancels")
    if callback_query.data == "main_cancel":
        if await state.get_state() != None:
            await state.reset_state()
            await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=MAIN_KEYBOARD)

    elif callback_query.data == "service_document":
        await ServiceForm.password_for_service.set()
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –°–õ–£–ñ–ï–ë–ù–£–Æ –ó–ê–ü–ò–°–ö–£ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–≥–æ –∫–æ–º–∏—Ç–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")

    elif callback_query.data == "mat_help":
        await MatHelpForm.prof_or_fond.set()
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–ê–¢–ï–†–ò–ê–õ–¨–ù–£–Æ –ü–û–ú–û–©–¨ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å:", reply_markup=MAT_HELP_BUDGET_KEYBOARD)


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def text_question_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global xl_data
    answers = await do_find_top_answers(message, xl_data)

    q_time = strftime("%Y-%m-%d %H:%M:%S", localtime())
    question = message.text
    username = message.from_user.username if message.from_user.username else "Nousername"
    first_last = message.from_user.first_name if message.from_user.first_name else "Noname" + " " + message.from_user.last_name if  message.from_user.last_name else "Noname" 

    if answers == False:
        df_result = detect_intent_texts("pelican-vbox", "123456789", message.text, "ru")
        if df_result:
            await message.answer(df_result, reply_markup=MAIN_KEYBOARD)
        else:
            await message.answer("–Ø –µ—â—ë —É—á—É—Å—å –ø–æ–Ω–∏–º–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Ñ—Ä–∞–∑—ã, —è –≤–µ–¥—å –≤—Å—ë-—Ç–∞–∫–∏ –ø–µ–ª–∏–∫–∞–Ω :)", reply_markup=MAIN_KEYBOARD)

        df_result = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞" if not df_result else df_result

        no_answer_message = f"""
====================
–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:

–ò–º—è: {first_last}
–ù–∏–∫–Ω–µ–π–º: {username}
–í—Ä–µ–º—è: {q_time}
–û—Ç–≤–µ—Ç dialogflow:
{df_result}
–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
{question}
====================
    """
        logging.info(f"{q_time}--{username}--{df_result}--Answered DF")

        # await bot.send_message(PELICAN_TEAM_ID, no_answer_message)

        
    elif answers == -1:
        logging.error(f"{q_time}--{username}--{question}--Error")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(", reply_markup=MAIN_KEYBOARD)
        await bot.send_message(PELICAN_TEAM_ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(")
    
    else:
        logging.info(f"{q_time}--{username}--{question}--Answered from XL")
        await message.answer(answers, reply_markup=MAIN_KEYBOARD)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)